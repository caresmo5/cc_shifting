import pandas as pd
import numpy as np
from datetime import datetime, timedelta, time
import random


planning = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Planning_Internacional 2024.xlsm', sheet_name= 'Plan2024')
planning.iloc[14,9:] = planning.iloc[11,9:]
names = planning.iloc[14]
planning = planning.iloc[15:]
planning.columns = names
planning = planning[planning['País'] == 'ALEMANIA']
planning = planning[(planning['Status'] == 'ALTA') | (planning['Status'] == 'BAJA TEMPORAL')]

dia = datetime.strptime('2023-12-04','%Y-%m-%d')
planning = planning[['Línea', 'Nombre', dia]]
planning = planning.dropna(axis=0, subset=[dia])
planning = planning[planning[dia] != 'V']
planning = planning[planning[dia] != 'B']
planning = planning[planning[dia] != 'P']
planning = planning[planning[dia] != 'F']
planning = planning[planning[dia] != 'Li']
planning = planning[planning[dia] != 'EJ']
planning = planning.sort_values(by=dia)

preferencias = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Preferencias.xlsx')
preferencias.rename(columns={'Nombre':'Agente','Agente':'Nombre'}, inplace=True)
planning = planning.merge(preferencias, on = 'Nombre')

forecast = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Forecast.xlsx')
forecast = forecast[3:].dropna(axis=1,how='any')
names = ['Hora']
names[1:335] = pd.date_range(datetime.strptime('2023-02-01','%Y-%m-%d'), periods=334).tolist()
forecast.columns = names
forecast = forecast.drop([3,34])
forecast = forecast[dia]
forecast = forecast.values

turnossin = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Turnos.xlsx', sheet_name='Sin pausas')

horas = turnossin.iloc[:,0]

nombreturnossin = turnossin.columns
nombreturnossin = nombreturnossin[1:]
frecuencia = [0,0,0,0,0,0,0,0,0,0]
frecuencia[0] = planning[dia].value_counts().get('M7',0) + planning[dia].value_counts().get('M7*',0)
frecuencia[1] = planning[dia].value_counts().get('M8',0) + planning[dia].value_counts().get('M8*',0)
frecuencia[2] = planning[dia].value_counts().get('M9',0) + planning[dia].value_counts().get('M9*',0)
frecuencia[3] = planning[dia].value_counts().get('M10',0) + planning[dia].value_counts().get('M10*',0)
frecuencia[4] = planning[dia].value_counts().get('P9:00',0)
frecuencia[5] = planning[dia].value_counts().get('P9:30',0)
frecuencia[6] = planning[dia].value_counts().get('M12',0) + planning[dia].value_counts().get('M12*',0)
frecuencia[7] = planning[dia].value_counts().get('T13',0) + planning[dia].value_counts().get('T13*',0)
frecuencia[8] = planning[dia].value_counts().get('T14',0) + planning[dia].value_counts().get('T14*',0)
frecuencia[9] = planning[dia].value_counts().get('M9:30',0) + planning[dia].value_counts().get('M9:30*',0)
contador = np.array(frecuencia)

turnossin = turnossin.drop(turnossin.columns[0],axis=1)
turnossin = turnossin.values

agentes = np.dot(turnossin,contador)

productividad = 4.5
tope_accesibilidad = 0.97

contestadas = agentes * productividad
contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad

accesibilidad = contestadas / forecast * 100
accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
acc.iloc[:,0] = horas
acc.iloc[:,1] = accesibilidad


turnoscon = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Turnos.xlsx', sheet_name='Con pausas')
pausas = turnoscon[32:35]


# Ordeno los agentes por líneas para intentar que los que tengan las mismas líneas coindidan lo mínimo en las pausas
planning = planning.sort_values(by=['Línea',dia])

CP = planning[planning['Línea'].isin(['CP',' CP','  CP','CP ','CP  '])]
RP = planning[planning['Línea'].isin(['RP',' RP','  RP','RP ','RP  '])]
SP = planning[planning['Línea'].isin(['SP',' SP','  SP','SP ','SP  '])]
RPAT = planning[planning['Línea'].isin(['RP/AT-RP',' RP/AT-RP','  RP/AT-RP','RP/AT-RP ','RP/AT-RP  '])]
RPCP = planning[planning['Línea'].isin(['RP/CP',' RP/CP','  RP/CP','RP/CP ','RP/CP  '])]
RPSP = planning[planning['Línea'].isin(['RP/SP',' RP/SP','  RP/SP','RP/SP ','RP/SP  '])]
RPSPCP = planning[planning['Línea'].isin(['RP/SP/CP',' RP/SP/CP','  RP/SP/CP','RP/SP/CP ','RP/SP/CP  '])]
SPCP = planning[planning['Línea'].isin(['SP/CP',' SP/CP','  SP/CP','SP/CP ','SP/CP  '])]

planning = planning.assign(Subturno = np.zeros((len(planning['Nombre']),1)))
planning = planning.assign(Lunch = np.zeros((len(planning['Nombre']),1)))

orden = pd.read_excel('C:/Users/Fernando/Downloads/Horarios y pausas/Orden horas.xlsx')

#CP
for i in range(len(planning['Nombre'])):
    CP = planning[planning['Línea'].isin(['CP',' CP','  CP','CP ','CP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = CP['Subturno'].value_counts().get('M7.1', 0)
        m72 = CP['Subturno'].value_counts().get('M7.2', 0)
        m73 = CP['Subturno'].value_counts().get('M7.3', 0)
        m74 = CP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = CP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = CP['Subturno'].value_counts().get('M8.1', 0)
        m82 = CP['Subturno'].value_counts().get('M8.2', 0)
        m83 = CP['Subturno'].value_counts().get('M8.3', 0)
        m84 = CP['Subturno'].value_counts().get('M8.4', 0)
        m85 = CP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = CP['Subturno'].value_counts().get('M9.1', 0)
        m92 = CP['Subturno'].value_counts().get('M9.2', 0)
        m93 = CP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = CP['Subturno'].value_counts().get('M10.1', 0)
        m102 = CP['Subturno'].value_counts().get('M10.2', 0)
        m103 = CP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = CP['Subturno'].value_counts().get('M12.1', 0)
        m122 = CP['Subturno'].value_counts().get('M12.2', 0)
        m123 = CP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = CP['Subturno'].value_counts().get('T13.1', 0)
        t132 = CP['Subturno'].value_counts().get('T13.2', 0)
        t133 = CP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = CP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = CP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = CP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'CP' or planning.iloc[i,0] == ' CP' or planning.iloc[i,0] == '  CP' or planning.iloc[i,0] == 'CP ' or planning.iloc[i,0] == 'CP  '):
        cantidad = CP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = CP['Subturno'].value_counts().get('T14.1', 0)
        t142 = CP['Subturno'].value_counts().get('T14.2', 0)
        t143 = CP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad


#RP
for i in range(len(planning['Nombre'])):
    RP = planning[planning['Línea'].isin(['RP',' RP','  RP','RP ','RP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = RP['Subturno'].value_counts().get('M7.1', 0)
        m72 = RP['Subturno'].value_counts().get('M7.2', 0)
        m73 = RP['Subturno'].value_counts().get('M7.3', 0)
        m74 = RP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = RP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = RP['Subturno'].value_counts().get('M8.1', 0)
        m82 = RP['Subturno'].value_counts().get('M8.2', 0)
        m83 = RP['Subturno'].value_counts().get('M8.3', 0)
        m84 = RP['Subturno'].value_counts().get('M8.4', 0)
        m85 = RP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = RP['Subturno'].value_counts().get('M9.1', 0)
        m92 = RP['Subturno'].value_counts().get('M9.2', 0)
        m93 = RP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = RP['Subturno'].value_counts().get('M10.1', 0)
        m102 = RP['Subturno'].value_counts().get('M10.2', 0)
        m103 = RP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = RP['Subturno'].value_counts().get('M12.1', 0)
        m122 = RP['Subturno'].value_counts().get('M12.2', 0)
        m123 = RP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = RP['Subturno'].value_counts().get('T13.1', 0)
        t132 = RP['Subturno'].value_counts().get('T13.2', 0)
        t133 = RP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = RP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = RP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = RP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP' or planning.iloc[i,0] == ' RP' or planning.iloc[i,0] == '  RP' or planning.iloc[i,0] == 'RP ' or planning.iloc[i,0] == 'RP  '):
        cantidad = RP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = RP['Subturno'].value_counts().get('T14.1', 0)
        t142 = RP['Subturno'].value_counts().get('T14.2', 0)
        t143 = RP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad


#SP
for i in range(len(planning['Nombre'])):
    SP = planning[planning['Línea'].isin(['SP',' SP','  SP','SP ','SP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = SP['Subturno'].value_counts().get('M7.1', 0)
        m72 = SP['Subturno'].value_counts().get('M7.2', 0)
        m73 = SP['Subturno'].value_counts().get('M7.3', 0)
        m74 = SP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = SP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = SP['Subturno'].value_counts().get('M8.1', 0)
        m82 = SP['Subturno'].value_counts().get('M8.2', 0)
        m83 = SP['Subturno'].value_counts().get('M8.3', 0)
        m84 = SP['Subturno'].value_counts().get('M8.4', 0)
        m85 = SP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = SP['Subturno'].value_counts().get('M9.1', 0)
        m92 = SP['Subturno'].value_counts().get('M9.2', 0)
        m93 = SP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = SP['Subturno'].value_counts().get('M10.1', 0)
        m102 = SP['Subturno'].value_counts().get('M10.2', 0)
        m103 = SP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = SP['Subturno'].value_counts().get('M12.1', 0)
        m122 = SP['Subturno'].value_counts().get('M12.2', 0)
        m123 = SP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = SP['Subturno'].value_counts().get('T13.1', 0)
        t132 = SP['Subturno'].value_counts().get('T13.2', 0)
        t133 = SP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = SP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = SP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = SP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'SP' or planning.iloc[i,0] == ' SP' or planning.iloc[i,0] == '  SP' or planning.iloc[i,0] == 'SP ' or planning.iloc[i,0] == 'SP  '):
        cantidad = SP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = SP['Subturno'].value_counts().get('T14.1', 0)
        t142 = SP['Subturno'].value_counts().get('T14.2', 0)
        t143 = SP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad


#RP/AT-RP
for i in range(len(planning['Nombre'])):
    RPAT = planning[planning['Línea'].isin(['RP/AT-RP',' RP/AT-RP','  RP/AT-RP','RP/AT-RP ','RP/AT-RP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = RPAT['Subturno'].value_counts().get('M7.1', 0)
        m72 = RPAT['Subturno'].value_counts().get('M7.2', 0)
        m73 = RPAT['Subturno'].value_counts().get('M7.3', 0)
        m74 = RPAT['Subturno'].value_counts().get('M7.4', 0)        
        m75 = RPAT['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = RPAT['Subturno'].value_counts().get('M8.1', 0)
        m82 = RPAT['Subturno'].value_counts().get('M8.2', 0)
        m83 = RPAT['Subturno'].value_counts().get('M8.3', 0)
        m84 = RPAT['Subturno'].value_counts().get('M8.4', 0)
        m85 = RPAT['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = RPAT['Subturno'].value_counts().get('M9.1', 0)
        m92 = RPAT['Subturno'].value_counts().get('M9.2', 0)
        m93 = RPAT['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = RPAT['Subturno'].value_counts().get('M10.1', 0)
        m102 = RPAT['Subturno'].value_counts().get('M10.2', 0)
        m103 = RPAT['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = RPAT['Subturno'].value_counts().get('M12.1', 0)
        m122 = RPAT['Subturno'].value_counts().get('M12.2', 0)
        m123 = RPAT['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = RPAT['Subturno'].value_counts().get('T13.1', 0)
        t132 = RPAT['Subturno'].value_counts().get('T13.2', 0)
        t133 = RPAT['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = RPAT['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = RPAT['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = RPAT['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/AT-RP' or planning.iloc[i,0] == ' RP/AT-RP' or planning.iloc[i,0] == '  RP/AT-RP' or planning.iloc[i,0] == 'RP/AT-RP ' or planning.iloc[i,0] == 'RP/AT-RP  '):
        cantidad = RPAT[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = RPAT['Subturno'].value_counts().get('T14.1', 0)
        t142 = RPAT['Subturno'].value_counts().get('T14.2', 0)
        t143 = RPAT['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad


#RP/CP
for i in range(len(planning['Nombre'])):
    RPCP = planning[planning['Línea'].isin(['RP/CP',' RP/CP','  RP/CP','RP/CP ','RP/CP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = RPCP['Subturno'].value_counts().get('M7.1', 0)
        m72 = RPCP['Subturno'].value_counts().get('M7.2', 0)
        m73 = RPCP['Subturno'].value_counts().get('M7.3', 0)
        m74 = RPCP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = RPCP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = RPCP['Subturno'].value_counts().get('M8.1', 0)
        m82 = RPCP['Subturno'].value_counts().get('M8.2', 0)
        m83 = RPCP['Subturno'].value_counts().get('M8.3', 0)
        m84 = RPCP['Subturno'].value_counts().get('M8.4', 0)
        m85 = RPCP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = RPCP['Subturno'].value_counts().get('M9.1', 0)
        m92 = RPCP['Subturno'].value_counts().get('M9.2', 0)
        m93 = RPCP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = RPCP['Subturno'].value_counts().get('M10.1', 0)
        m102 = RPCP['Subturno'].value_counts().get('M10.2', 0)
        m103 = RPCP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = RPCP['Subturno'].value_counts().get('M12.1', 0)
        m122 = RPCP['Subturno'].value_counts().get('M12.2', 0)
        m123 = RPCP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = RPCP['Subturno'].value_counts().get('T13.1', 0)
        t132 = RPCP['Subturno'].value_counts().get('T13.2', 0)
        t133 = RPCP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = RPCP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = RPCP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = RPCP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/CP' or planning.iloc[i,0] == ' RP/CP' or planning.iloc[i,0] == '  RP/CP' or planning.iloc[i,0] == 'RP/CP ' or planning.iloc[i,0] == 'RP/CP  '):
        cantidad = RPCP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = RPCP['Subturno'].value_counts().get('T14.1', 0)
        t142 = RPCP['Subturno'].value_counts().get('T14.2', 0)
        t143 = RPCP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
        planning.iloc[i,6] = maximo.loc['Subturno']
        planning.iloc[i,7] = maximo.loc['Hora']     

        posicion = maximo.loc['Hora']
        posicion = orden[orden['Hora'] == posicion]
        posicion = posicion.iloc[0,1]
        agentes[posicion] = agentes[posicion] - 1

        contestadas = agentes * productividad
        contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
        accesibilidad = contestadas / forecast * 100
        accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

        acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
        acc.iloc[:,0] = horas
        acc.iloc[:,1] = accesibilidad


#RP/SP
for i in range(len(planning['Nombre'])):
    RPSP = planning[planning['Línea'].isin(['RP/SP',' RP/SP','  RP/SP','RP/SP ','RP/SP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = RPSP['Subturno'].value_counts().get('M7.1', 0)
        m72 = RPSP['Subturno'].value_counts().get('M7.2', 0)
        m73 = RPSP['Subturno'].value_counts().get('M7.3', 0)
        m74 = RPSP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = RPSP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = RPSP['Subturno'].value_counts().get('M8.1', 0)
        m82 = RPSP['Subturno'].value_counts().get('M8.2', 0)
        m83 = RPSP['Subturno'].value_counts().get('M8.3', 0)
        m84 = RPSP['Subturno'].value_counts().get('M8.4', 0)
        m85 = RPSP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = RPSP['Subturno'].value_counts().get('M9.1', 0)
        m92 = RPSP['Subturno'].value_counts().get('M9.2', 0)
        m93 = RPSP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = RPSP['Subturno'].value_counts().get('M10.1', 0)
        m102 = RPSP['Subturno'].value_counts().get('M10.2', 0)
        m103 = RPSP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = RPSP['Subturno'].value_counts().get('M12.1', 0)
        m122 = RPSP['Subturno'].value_counts().get('M12.2', 0)
        m123 = RPSP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = RPSP['Subturno'].value_counts().get('T13.1', 0)
        t132 = RPSP['Subturno'].value_counts().get('T13.2', 0)
        t133 = RPSP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = RPSP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = RPSP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = RPSP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/SP' or planning.iloc[i,0] == ' RP/SP' or planning.iloc[i,0] == '  RP/SP' or planning.iloc[i,0] == 'RP/SP ' or planning.iloc[i,0] == 'RP/SP  '):
        cantidad = RPSP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = RPSP['Subturno'].value_counts().get('T14.1', 0)
        t142 = RPSP['Subturno'].value_counts().get('T14.2', 0)
        t143 = RPSP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")


#RP/SP/CP
for i in range(len(planning['Nombre'])):
    RPSPCP = planning[planning['Línea'].isin(['RP/SP/CP',' RP/SP/CP','  RP/SP/CP','RP/SP/CP ','RP/SP/CP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = RPSPCP['Subturno'].value_counts().get('M7.1', 0)
        m72 = RPSPCP['Subturno'].value_counts().get('M7.2', 0)
        m73 = RPSPCP['Subturno'].value_counts().get('M7.3', 0)
        m74 = RPSPCP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = RPSPCP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = RPSPCP['Subturno'].value_counts().get('M8.1', 0)
        m82 = RPSPCP['Subturno'].value_counts().get('M8.2', 0)
        m83 = RPSPCP['Subturno'].value_counts().get('M8.3', 0)
        m84 = RPSPCP['Subturno'].value_counts().get('M8.4', 0)
        m85 = RPSPCP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = RPSPCP['Subturno'].value_counts().get('M9.1', 0)
        m92 = RPSPCP['Subturno'].value_counts().get('M9.2', 0)
        m93 = RPSPCP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = RPSPCP['Subturno'].value_counts().get('M10.1', 0)
        m102 = RPSPCP['Subturno'].value_counts().get('M10.2', 0)
        m103 = RPSPCP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = RPSPCP['Subturno'].value_counts().get('M12.1', 0)
        m122 = RPSPCP['Subturno'].value_counts().get('M12.2', 0)
        m123 = RPSPCP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = RPSPCP['Subturno'].value_counts().get('T13.1', 0)
        t132 = RPSPCP['Subturno'].value_counts().get('T13.2', 0)
        t133 = RPSPCP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = RPSPCP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = RPSPCP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = RPSPCP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'RP/SP/CP' or planning.iloc[i,0] == ' RP/SP/CP' or planning.iloc[i,0] == '  RP/SP/CP' or planning.iloc[i,0] == 'RP/SP/CP ' or planning.iloc[i,0] == 'RP/SP/CP  '):
        cantidad = RPSPCP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = RPSPCP['Subturno'].value_counts().get('T14.1', 0)
        t142 = RPSPCP['Subturno'].value_counts().get('T14.2', 0)
        t143 = RPSPCP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")


#SP/CP
for i in range(len(planning['Nombre'])):
    SPCP = planning[planning['Línea'].isin(['SP/CP',' SP/CP','  SP/CP','SP/CP ','SP/CP  '])]
    if planning.iloc[i,2] == 'M7' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M7',0)
        horas_dispo = pausas.loc[[33],['M7.1','M7.2','M7.3','M7.4','M7.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M7.1','M7.2','M7.3','M7.4','M7.5'])

        m71 = SPCP['Subturno'].value_counts().get('M7.1', 0)
        m72 = SPCP['Subturno'].value_counts().get('M7.2', 0)
        m73 = SPCP['Subturno'].value_counts().get('M7.3', 0)
        m74 = SPCP['Subturno'].value_counts().get('M7.4', 0)        
        m75 = SPCP['Subturno'].value_counts().get('M7.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m71,m72,m73,m74,m75])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M8' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M8',0)
        horas_dispo = pausas.loc[[33],['M8.1','M8.2','M8.3','M8.4','M8.5']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M8.1','M8.2','M8.3','M8.4','M8.5'])

        m81 = SPCP['Subturno'].value_counts().get('M8.1', 0)
        m82 = SPCP['Subturno'].value_counts().get('M8.2', 0)
        m83 = SPCP['Subturno'].value_counts().get('M8.3', 0)
        m84 = SPCP['Subturno'].value_counts().get('M8.4', 0)
        m85 = SPCP['Subturno'].value_counts().get('M8.5', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m81,m82,m83,m84,m85])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()

        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M9',0)
        horas_dispo = pausas.loc[[33],['M9.1','M9.2','M9.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9.1','M9.2','M9.3'])

        m91 = SPCP['Subturno'].value_counts().get('M9.1', 0)
        m92 = SPCP['Subturno'].value_counts().get('M9.2', 0)
        m93 = SPCP['Subturno'].value_counts().get('M9.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m91,m92,m93])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")
    
    if planning.iloc[i,2] == 'M10' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M10',0)
        horas_dispo = pausas.loc[[33],['M10.1','M10.2','M10.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M10.1','M10.2','M10.3'])

        m101 = SPCP['Subturno'].value_counts().get('M10.1', 0)
        m102 = SPCP['Subturno'].value_counts().get('M10.2', 0)
        m103 = SPCP['Subturno'].value_counts().get('M10.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m101,m102,m103])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M12' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M12',0)
        horas_dispo = pausas.loc[[33],['M12.1','M12.2','M12.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M12.1','M12.2','M12.3'])

        m121 = SPCP['Subturno'].value_counts().get('M12.1', 0)
        m122 = SPCP['Subturno'].value_counts().get('M12.2', 0)
        m123 = SPCP['Subturno'].value_counts().get('M12.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m121,m122,m123])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T13' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('T13',0)
        horas_dispo = pausas.loc[[33],['T13.1','T13.2','T13.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T13.1','T13.2','T13.3'])

        t131 = SPCP['Subturno'].value_counts().get('T13.1', 0)
        t132 = SPCP['Subturno'].value_counts().get('T13.2', 0)
        t133 = SPCP['Subturno'].value_counts().get('T13.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t131,t132,t133])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'M9:30' and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('M9:30',0)
        horas_dispo = pausas.loc[[33],['M9:30.1','M9:30.2','M9:30.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['M9:30.1','M9:30.2','M9:30.3'])

        m9301 = SPCP['Subturno'].value_counts().get('M9:30.1', 0)
        m9302 = SPCP['Subturno'].value_counts().get('M9:30.2', 0)
        m9303 = SPCP['Subturno'].value_counts().get('M9:30.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [m9301,m9302,m9303])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")

    if planning.iloc[i,2] == 'T14' and planning.iloc[i,5] == "10'-30'-10'" and (planning.iloc[i,0] == 'SP/CP' or planning.iloc[i,0] == ' SP/CP' or planning.iloc[i,0] == '  SP/CP' or planning.iloc[i,0] == 'SP/CP ' or planning.iloc[i,0] == 'SP/CP  '):
        cantidad = SPCP[dia].value_counts().get('T14',0)
        horas_dispo = pausas.loc[[33],['T14.1','T14.2','T14.3']]
        horas_dispo.index = ['Hora']
        horas_dispo = acc.loc[acc['Hora'].isin(horas_dispo.iloc[0])]
        horas_dispo = horas_dispo.assign(Subturno = ['T14.1','T14.2','T4.3'])

        t141 = SPCP['Subturno'].value_counts().get('T14.1', 0)
        t142 = SPCP['Subturno'].value_counts().get('T14.2', 0)
        t143 = SPCP['Subturno'].value_counts().get('T14.3', 0)

        horas_dispo = horas_dispo.assign(Frecuencia = [t141,t142,t143])
        if cantidad > 1:
            horas_dispo = horas_dispo[horas_dispo['Frecuencia'] < cantidad / 2]

        maximo = horas_dispo['Accesibilidad'].max()
        if not horas_dispo[horas_dispo['Accesibilidad'] == maximo].empty:
            maximo = horas_dispo[horas_dispo['Accesibilidad'] == maximo].iloc[0]
            planning.iloc[i,6] = maximo.loc['Subturno']
            planning.iloc[i,7] = maximo.loc['Hora']     

            posicion = maximo.loc['Hora']
            posicion = orden[orden['Hora'] == posicion]
            posicion = posicion.iloc[0,1]
            agentes[posicion] = agentes[posicion] - 1

            contestadas = agentes * productividad
            contestadas = np.minimum(contestadas,forecast) * tope_accesibilidad
            accesibilidad = contestadas / forecast * 100
            accesibilidad_dia = np.sum(contestadas) / np.sum(forecast) * 100

            acc = pd.DataFrame(np.random.randn(30,2), columns=['Hora','Accesibilidad'])
            acc.iloc[:,0] = horas
            acc.iloc[:,1] = accesibilidad

        else:
            print("No rows found with the specified condition.")



# Pongo Lunch+ y Lunch++
planning = planning.assign(Lunch2 = np.zeros((len(planning['Nombre']),1)))
planning = planning.assign(Lunch3 = np.zeros((len(planning['Nombre']),1)))

for i in range(len(planning['Nombre'])):
    if planning.loc[i,'Subturno'] != 0:
        planning.loc[i,'Lunch2'] = (datetime.combine(datetime.today(), planning.loc[i,'Lunch']) + timedelta(minutes=10)).time()
        planning.loc[i,'Lunch3'] = (datetime.combine(datetime.today(), planning.loc[i,'Lunch']) + timedelta(minutes=20)).time()





# Breaks P9:30
planning = planning.assign(Break1 = np.zeros((len(planning['Nombre']),1)))
planning = planning.assign(Break2 = np.zeros((len(planning['Nombre']),1)))

break1 = pausas.loc[32,'P9:30']
break2 = pausas.loc[34,'P9:30']

for i in range(len(planning['Nombre'])):
    if planning.loc[i,dia] == 'P9:30':
        planning.loc[i,'Break1'] = (datetime.combine(datetime.today(), break1) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()
        planning.loc[i,'Break2'] = (datetime.combine(datetime.today(), break2) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()



# Breaks P9:00
break1 = pausas.loc[32,'P9:00']
break2 = pausas.loc[34,'P9:00']

for i in range(len(planning['Nombre'])):
    if planning.loc[i,dia] == 'P9:00':
        planning.loc[i,'Break1'] = (datetime.combine(datetime.today(), break1) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()
        planning.loc[i,'Break2'] = (datetime.combine(datetime.today(), break2) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()



# Breaks M7
for i in range(len(planning['Nombre'])):
    if planning.loc[i,dia] == 'M7' and planning.loc[i,'Preferencia'] == 1:
        planning.loc[i,'Subturno'] = 'M7.0.1'
        break1 = time(9,20,00)
        planning.loc[i,'Break1'] = (datetime.combine(datetime.today(), break1) + timedelta(minutes=random.choice([0,10,20]))).time()
        if planning.loc[i,'Break1'] == time(9,20,00):
            planning.loc[i,'Break2'] = time(12,10,00)
        if planning.loc[i,'Break1'] == time(9,30,00):
            planning.loc[i,'Break2'] = time(12,20,00)
        if planning.loc[i,'Break1'] == time(9,40,00):
            planning.loc[i,'Break2'] = time(12,30,00)

    if planning.loc[i,dia] == 'M7' and planning.loc[i,'Preferencia'] == 2:
        lunch = time(10,40,00)
        planning.loc[i,'Subturno'] = 'M7.0.2'
        planning.loc[i,'Lunch'] = (datetime.combine(datetime.today(), lunch) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()
        planning.loc[i,'Lunch2'] = (datetime.combine(datetime.today(), planning.loc[i,'Lunch']) + timedelta(minutes=10)).time()



# Breaks T14
for i in range(len(planning['Nombre'])):
    if planning.loc[i,dia] == 'T14' and planning.loc[i,'Preferencia'] == 1:
        planning.loc[i,'Subturno'] = 'T14.0.1'
        break1 = time(16,20,00)
        planning.loc[i,'Break1'] = (datetime.combine(datetime.today(), break1) + timedelta(minutes=random.choice([0,10,20]))).time()
        if planning.loc[i,'Break1'] == time(16,20,00):
            planning.loc[i,'Break2'] = time(19,10,00)
        if planning.loc[i,'Break1'] == time(16,30,00):
            planning.loc[i,'Break2'] = time(19,20,00)
        if planning.loc[i,'Break1'] == time(16,40,00):
            planning.loc[i,'Break2'] = time(19,30,00)

    if planning.loc[i,dia] == 'T14' and planning.loc[i,'Preferencia'] == 2:
        lunch = time(16,40,00)
        planning.loc[i,'Subturno'] = 'T14.0.2'
        planning.loc[i,'Lunch'] = (datetime.combine(datetime.today(), lunch) + timedelta(minutes=random.choice([0,10,20,30,40]))).time()
        planning.loc[i,'Lunch2'] = (datetime.combine(datetime.today(), planning.loc[i,'Lunch']) + timedelta(minutes=10)).time()





# Resto de breaks
resto_turnos = ['M7.1','M7.2','M7.3','M7.4','M7.5','M8.1','M8.2','M8.3','M8.4','M8.5','M9.1','M9.2','M9.3','M10.1','M10.2','M10.3','M12.1','M12.2','M12.3','T13.1','T13.2','T13.3','T14.1','T14.2','T14.3','M9:30.1','M9:30.2','M9:30.3']

for i in range(len(planning['Nombre'])):
    for j in resto_turnos:
        if planning.loc[i,'Subturno'] == j:
            planning.loc[i,'Break1'] = pausas.loc[32,j]

for i in range(len(planning['Nombre'])):
    for j in resto_turnos:
        if planning.loc[i,'Subturno'] == j:
            planning.loc[i,'Break2'] = pausas.loc[34,j]



# Casos especiales





planning2 = pd.melt(planning, id_vars=['Línea', 'Nombre',dia,'Agente', 'Preferencia', 'Pref. Texto', 'Subturno'], var_name='Tipo de pausa', value_name='Hora')

planning2.to_excel('Pausas.xlsx',index=False)
